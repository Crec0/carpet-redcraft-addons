package it.multicoredev.carpetredcraftaddons.util;

import carpet.CarpetServer;
import carpet.script.bundled.BundledModule;
import carpet.settings.ParsedRule;
import com.google.common.collect.Lists;
import com.google.gson.JsonObject;
import com.mojang.bridge.game.PackType;
import it.multicoredev.carpetredcraftaddons.CarpetRedCraftExtension;
import it.multicoredev.carpetredcraftaddons.CarpetRedCraftSettings;
import net.minecraft.SharedConstants;
import net.minecraft.resource.ResourcePackManager;
import net.minecraft.server.command.ReloadCommand;
import net.minecraft.util.WorldSavePath;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.net.URL;
import java.nio.file.*;
import java.util.Collection;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import static it.multicoredev.carpetredcraftaddons.CarpetRedCraftExtension.*;

public class DatapackUtil {
    public static void deleteFile(File file) {
        if (Files.isDirectory(file.toPath())) {
            try {
                FileUtils.deleteDirectory(file);
            } catch (IOException e) {
                LOG.error(e);
            }
        } else {
            try {
                Files.deleteIfExists(file.toPath());
            } catch (IOException e) {
                LOG.error(e);
            }
        }
    }

    public static void initializeFolders() {
        String datapackPath = datapackFile("data").toPath().toAbsolutePath().toString();
        try {
            Files.createDirectories(Paths.get(datapackPath, MOD_ID, "recipes"));
            Files.createDirectories(Paths.get(datapackPath, MOD_ID, "advancements"));
            Files.createDirectories(Paths.get(datapackPath, MOD_ID, "loot_tables"));
            Files.createDirectories(Paths.get(datapackPath, MOD_ID, "tags"));
            Files.createDirectories(Paths.get(datapackPath, "minecraft", "recipes"));
            Files.createDirectories(Paths.get(datapackPath, "minecraft", "loot_tables"));
            Files.createDirectories(Paths.get(datapackPath, "minecraft", "tags"));
            generatePackMcmeta();
            generateRootAdvancement();
        } catch (IOException e) {
            LOG.error(e);
        }
    }

    private static void generatePackMcmeta() throws IOException {
        JsonObject pack = new JsonObject();
        pack.addProperty("pack_format", SharedConstants.getGameVersion().getPackVersion(PackType.DATA));
        pack.addProperty("description", "Dynamic DataPack generated by " + MOD_NAME);
        JsonObject packMcmeta = new JsonObject();
        packMcmeta.add("pack", pack);

        FileWriter file = new FileWriter(datapackFile("pack.mcmeta"));
        file.write(packMcmeta.toString());
        file.close();
    }

    private static void generateRootAdvancement() throws IOException {
        JsonObject tick = new JsonObject();
        tick.addProperty("trigger", "minecraft:tick");
        JsonObject criteria = new JsonObject();
        criteria.add("tick", tick);
        JsonObject rootAdvancement = new JsonObject();
        rootAdvancement.add("criteria", criteria);

        FileWriter file = new FileWriter(datapackFile("data").toPath().resolve(MOD_ID).resolve("advancements").resolve("root.json").toFile());
        file.write(rootAdvancement.toString());
        file.close();
    }

    public static void initializeDatapack() {
        boolean firstTime = !Files.isDirectory(datapackFile("").toPath());
        deleteFile(datapackFile("data"));
        initializeFolders();
        initializeRules();
        reload();
        if (firstTime) {
            CarpetServer.minecraft_server.getCommandManager().execute(CarpetServer.minecraft_server.getCommandSource(), "/datapack enable \"file/" + MOD_NAME + "\"");
        }
    }

    private static void initializeRules() {
        Path dataPath = datapackFile("data").toPath();
        for (Field f : CarpetRedCraftSettings.class.getDeclaredFields()) {
            CraftingRule craftingRule = f.getAnnotation(CraftingRule.class);
            boolean needsReload = false;
            String ruleName = f.getName();
            if (craftingRule != null) {
                registerRule(
                        ruleName,
                        craftingRule.recipes(),
                        craftingRule.overrideRecipes(),
                        dataPath,
                        "recipes"
                );
                needsReload = true;
            }
            TagRule tagRule = f.getAnnotation(TagRule.class);
            if (tagRule != null) {
                registerRule(
                        ruleName,
                        tagRule.tags(),
                        tagRule.overrideTags(),
                        dataPath,
                        "tags"
                );
                needsReload = true;
            }
            LootTableRule lootTableRule = f.getAnnotation(LootTableRule.class);
            if (lootTableRule != null) {
                registerRule(
                        ruleName,
                        lootTableRule.loottables(),
                        lootTableRule.overrideLoottables(),
                        dataPath,
                        "loot_tables"
                );
                needsReload = true;
            }
            if (needsReload) {
                CarpetServer.settingsManager.addRuleObserver((source, rule, s) -> {
                    if (rule.name.equals(ruleName)) {
                        reload();
                    }
                });
            }
        }
    }

    private static void registerRule(String ruleName, String[] elements, String[] overrideElements, Path dataPath, String type) {
        updateRule(CarpetServer.settingsManager.getRule(ruleName), elements, overrideElements, dataPath, type);
        CarpetServer.settingsManager.addRuleObserver((source, rule, s) -> {
            if (rule.name.equals(ruleName)) {
                updateRule(rule, elements, overrideElements, dataPath, type);
            }
        });
    }

    private static void updateRule(ParsedRule<?> rule, String[] elements, String[] overrideElements, Path dataPath, String type) {
        if (rule.getBoolValue()) {
            for (String element : elements) if (!element.equals("")) copyElement(element, dataPath, type, false);
            for (String element : overrideElements) if (!element.equals("")) copyElement(element, dataPath, type, true);
        } else {
            for (String element : elements)
                if (!element.equals(""))
                    deleteFile(dataPath.resolve(MOD_ID).resolve(type).resolve(element).toFile());
            for (String overrideElement : overrideElements)
                if (!overrideElement.equals(""))
                    deleteFile(dataPath.resolve("minecraft").resolve(type).resolve(overrideElement).toFile());
        }
    }

    public static File datapackFile(String subpath) {
        return new File(CarpetServer.minecraft_server.getSavePath(WorldSavePath.DATAPACKS).toString() + File.separator + MOD_NAME + File.separator + subpath);
    }

    private static void reload() {
        ResourcePackManager datapackManager = CarpetServer.minecraft_server.getDataPackManager();
        datapackManager.scanPacks();
        Collection<String> collection = Lists.newArrayList(datapackManager.getEnabledNames());
        collection.add(MOD_NAME);

        ReloadCommand.tryReloadDataPacks(collection, CarpetServer.minecraft_server.getCommandSource());
    }

    public static void copyElement(String element, Path dataPath, String type, boolean overrideVanilla) {
        String parent = overrideVanilla ? "minecraft" : MOD_ID;

        String target = parent + "/" + type + "/" + element;
        String resourcePath = ".data/" + target;

        final File jarFile = new File(CarpetRedCraftExtension.class.getProtectionDomain().getCodeSource().getLocation().getPath());
        if (jarFile.isFile()) copyElementFromJar(jarFile, dataPath, resourcePath);
        else copyElementFromIDE(resourcePath, dataPath.resolve(target));
    }

    public static void copyElementFromJar(File jarFile, Path dataPath, String resourcePath) {
        try {

            final JarFile jar = new JarFile(jarFile);
            final Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                final String filePath = entries.nextElement().getName();
                if (filePath.endsWith(".json") && (filePath.startsWith(resourcePath + "/") || filePath.equals(resourcePath))) {
                    InputStream source = BundledModule.class.getClassLoader().getResourceAsStream(filePath);
                    try {
                        assert source != null;
                        Path targetPath = dataPath.resolve(filePath.replace(".data/", ""));
                        Files.createDirectories(targetPath.getParent());
                        Files.copy(source, targetPath, StandardCopyOption.REPLACE_EXISTING);
                    } catch (IOException e) {
                        LOG.error(e);
                    } catch (NullPointerException e) {
                        LOG.error("Resource '" + filePath + "' is null:");
                        e.printStackTrace();
                    }
                }
            }
            jar.close();
        } catch (IOException e) {
            LOG.error(e);
        }
    }

    public static void copyElementFromIDE(String resourcePath, Path targetPath) {
        try {
            URL resourceURL = BundledModule.class.getClassLoader().getResource(resourcePath);
            if (resourceURL == null) throw new NoSuchFileException("Impossible to find " + resourcePath);

            File resourceFile = Paths.get(resourceURL.toURI()).toFile();
            if (!resourceFile.exists()) throw new NoSuchFileException("Impossible to find " + resourceFile);
            if (resourceFile.isDirectory()) {
                FileUtils.copyDirectory(resourceFile, targetPath.toFile());
            } else if (resourceFile.isFile()) {
                Files.createDirectories(targetPath.getParent());
                Files.copy(resourceFile.toPath(), targetPath, StandardCopyOption.REPLACE_EXISTING);
            }
        } catch (Exception e) {
            LOG.error(e);
        }
    }

}
